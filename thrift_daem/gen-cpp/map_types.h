/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef map_TYPES_H
#define map_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




struct OrderType {
  enum type {
    COMMONORDER = 0,
    SHAREDORDER = 1
  };
};

extern const std::map<int, const char*> _OrderType_VALUES_TO_NAMES;

class ServiceException;

class ComputeReq;

class ComputeResp;


class ServiceException : public ::apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ServiceException(const ServiceException&);
  ServiceException& operator=(const ServiceException&);
  ServiceException() : errorMsg() {
  }

  virtual ~ServiceException() throw();
  std::string errorMsg;

  void __set_errorMsg(const std::string& val);

  bool operator == (const ServiceException & rhs) const
  {
    if (!(errorMsg == rhs.errorMsg))
      return false;
    return true;
  }
  bool operator != (const ServiceException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServiceException & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ServiceException& obj);
};

void swap(ServiceException &a, ServiceException &b);


class ComputeReq {
 public:

  static const char* ascii_fingerprint; // = "E0F8E3FBEAC388E288DB6D6DE2327F52";
  static const uint8_t binary_fingerprint[16]; // = {0xE0,0xF8,0xE3,0xFB,0xEA,0xC3,0x88,0xE2,0x88,0xDB,0x6D,0x6D,0xE2,0x32,0x7F,0x52};

  ComputeReq(const ComputeReq&);
  ComputeReq& operator=(const ComputeReq&);
  ComputeReq() : type(0), jobId(0), cityId(0), mapsplitId(0) {
  }

  virtual ~ComputeReq() throw();
  int8_t type;
  int64_t jobId;
  int32_t cityId;
  int32_t mapsplitId;
  std::vector<int64_t>  oidList;
  std::vector<int64_t>  didList;

  void __set_type(const int8_t val);

  void __set_jobId(const int64_t val);

  void __set_cityId(const int32_t val);

  void __set_mapsplitId(const int32_t val);

  void __set_oidList(const std::vector<int64_t> & val);

  void __set_didList(const std::vector<int64_t> & val);

  bool operator == (const ComputeReq & rhs) const
  {
    if (!(type == rhs.type))
      return false;
    if (!(jobId == rhs.jobId))
      return false;
    if (!(cityId == rhs.cityId))
      return false;
    if (!(mapsplitId == rhs.mapsplitId))
      return false;
    if (!(oidList == rhs.oidList))
      return false;
    if (!(didList == rhs.didList))
      return false;
    return true;
  }
  bool operator != (const ComputeReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComputeReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ComputeReq& obj);
};

void swap(ComputeReq &a, ComputeReq &b);


class ComputeResp {
 public:

  static const char* ascii_fingerprint; // = "D107D7871DEF6F5C2F0D1CC6DD8AB626";
  static const uint8_t binary_fingerprint[16]; // = {0xD1,0x07,0xD7,0x87,0x1D,0xEF,0x6F,0x5C,0x2F,0x0D,0x1C,0xC6,0xDD,0x8A,0xB6,0x26};

  ComputeResp(const ComputeResp&);
  ComputeResp& operator=(const ComputeResp&);
  ComputeResp() : version(0), type(0), status(0), mapsplitId(0), data() {
  }

  virtual ~ComputeResp() throw();
  int8_t version;
  int32_t type;
  int8_t status;
  int32_t mapsplitId;
  std::string data;

  void __set_version(const int8_t val);

  void __set_type(const int32_t val);

  void __set_status(const int8_t val);

  void __set_mapsplitId(const int32_t val);

  void __set_data(const std::string& val);

  bool operator == (const ComputeResp & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(mapsplitId == rhs.mapsplitId))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const ComputeResp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComputeResp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ComputeResp& obj);
};

void swap(ComputeResp &a, ComputeResp &b);



#endif
