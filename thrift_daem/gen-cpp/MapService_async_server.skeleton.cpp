// This autogenerated skeleton file illustrates one way to adapt a synchronous
// interface into an asynchronous interface. You should copy it to another
// filename to avoid overwriting it and rewrite as asynchronous any functions
// that would otherwise introduce unwanted latency.

#include "MapService.h"
#include <thrift/protocol/TBinaryProtocol.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::async;

using boost::shared_ptr;

class MapServiceAsyncHandler : public MapServiceCobSvIf {
 public:
  MapServiceAsyncHandler() {
    syncHandler_ = std::auto_ptr<MapServiceHandler>(new MapServiceHandler);
    // Your initialization goes here
  }
  virtual ~MapServiceAsyncHandler();

  void compute(tcxx::function<void(ComputeResp const& _return)> cob, tcxx::function<void(::apache::thrift::TDelayedException* _throw)> /* exn_cob */, const ComputeReq& req) {
    ComputeResp _return;
    syncHandler_->compute(_return, req);
    return cob(_return);
  }

 protected:
  std::auto_ptr<MapServiceHandler> syncHandler_;
};

