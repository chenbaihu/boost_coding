/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "map_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>



int _kOrderTypeValues[] = {
  OrderType::COMMONORDER,
  OrderType::SHAREDORDER
};
const char* _kOrderTypeNames[] = {
  "COMMONORDER",
  "SHAREDORDER"
};
const std::map<int, const char*> _OrderType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kOrderTypeValues, _kOrderTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


ServiceException::~ServiceException() throw() {
}


void ServiceException::__set_errorMsg(const std::string& val) {
  this->errorMsg = val;
}

const char* ServiceException::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t ServiceException::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t ServiceException::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_errorMsg = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errorMsg);
          isset_errorMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_errorMsg)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ServiceException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ServiceException");

  xfer += oprot->writeFieldBegin("errorMsg", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->errorMsg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ServiceException &a, ServiceException &b) {
  using ::std::swap;
  swap(a.errorMsg, b.errorMsg);
}

ServiceException::ServiceException(const ServiceException& other0) : TException() {
  errorMsg = other0.errorMsg;
}
ServiceException& ServiceException::operator=(const ServiceException& other1) {
  errorMsg = other1.errorMsg;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ServiceException& obj) {
  using apache::thrift::to_string;
  out << "ServiceException(";
  out << "errorMsg=" << to_string(obj.errorMsg);
  out << ")";
  return out;
}


ComputeReq::~ComputeReq() throw() {
}


void ComputeReq::__set_type(const int8_t val) {
  this->type = val;
}

void ComputeReq::__set_jobId(const int64_t val) {
  this->jobId = val;
}

void ComputeReq::__set_cityId(const int32_t val) {
  this->cityId = val;
}

void ComputeReq::__set_mapsplitId(const int32_t val) {
  this->mapsplitId = val;
}

void ComputeReq::__set_oidList(const std::vector<int64_t> & val) {
  this->oidList = val;
}

void ComputeReq::__set_didList(const std::vector<int64_t> & val) {
  this->didList = val;
}

const char* ComputeReq::ascii_fingerprint = "E0F8E3FBEAC388E288DB6D6DE2327F52";
const uint8_t ComputeReq::binary_fingerprint[16] = {0xE0,0xF8,0xE3,0xFB,0xEA,0xC3,0x88,0xE2,0x88,0xDB,0x6D,0x6D,0xE2,0x32,0x7F,0x52};

uint32_t ComputeReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_type = false;
  bool isset_jobId = false;
  bool isset_cityId = false;
  bool isset_mapsplitId = false;
  bool isset_oidList = false;
  bool isset_didList = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->type);
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->jobId);
          isset_jobId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->cityId);
          isset_cityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mapsplitId);
          isset_mapsplitId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->oidList.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->oidList.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += iprot->readI64(this->oidList[_i6]);
            }
            xfer += iprot->readListEnd();
          }
          isset_oidList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->didList.clear();
            uint32_t _size7;
            ::apache::thrift::protocol::TType _etype10;
            xfer += iprot->readListBegin(_etype10, _size7);
            this->didList.resize(_size7);
            uint32_t _i11;
            for (_i11 = 0; _i11 < _size7; ++_i11)
            {
              xfer += iprot->readI64(this->didList[_i11]);
            }
            xfer += iprot->readListEnd();
          }
          isset_didList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_jobId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_cityId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_mapsplitId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_oidList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_didList)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ComputeReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ComputeReq");

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jobId", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->jobId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cityId", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->cityId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mapsplitId", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->mapsplitId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("oidList", ::apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->oidList.size()));
    std::vector<int64_t> ::const_iterator _iter12;
    for (_iter12 = this->oidList.begin(); _iter12 != this->oidList.end(); ++_iter12)
    {
      xfer += oprot->writeI64((*_iter12));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("didList", ::apache::thrift::protocol::T_LIST, 6);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t>(this->didList.size()));
    std::vector<int64_t> ::const_iterator _iter13;
    for (_iter13 = this->didList.begin(); _iter13 != this->didList.end(); ++_iter13)
    {
      xfer += oprot->writeI64((*_iter13));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ComputeReq &a, ComputeReq &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.jobId, b.jobId);
  swap(a.cityId, b.cityId);
  swap(a.mapsplitId, b.mapsplitId);
  swap(a.oidList, b.oidList);
  swap(a.didList, b.didList);
}

ComputeReq::ComputeReq(const ComputeReq& other14) {
  type = other14.type;
  jobId = other14.jobId;
  cityId = other14.cityId;
  mapsplitId = other14.mapsplitId;
  oidList = other14.oidList;
  didList = other14.didList;
}
ComputeReq& ComputeReq::operator=(const ComputeReq& other15) {
  type = other15.type;
  jobId = other15.jobId;
  cityId = other15.cityId;
  mapsplitId = other15.mapsplitId;
  oidList = other15.oidList;
  didList = other15.didList;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ComputeReq& obj) {
  using apache::thrift::to_string;
  out << "ComputeReq(";
  out << "type=" << to_string(obj.type);
  out << ", " << "jobId=" << to_string(obj.jobId);
  out << ", " << "cityId=" << to_string(obj.cityId);
  out << ", " << "mapsplitId=" << to_string(obj.mapsplitId);
  out << ", " << "oidList=" << to_string(obj.oidList);
  out << ", " << "didList=" << to_string(obj.didList);
  out << ")";
  return out;
}


ComputeResp::~ComputeResp() throw() {
}


void ComputeResp::__set_version(const int8_t val) {
  this->version = val;
}

void ComputeResp::__set_type(const int32_t val) {
  this->type = val;
}

void ComputeResp::__set_status(const int8_t val) {
  this->status = val;
}

void ComputeResp::__set_mapsplitId(const int32_t val) {
  this->mapsplitId = val;
}

void ComputeResp::__set_data(const std::string& val) {
  this->data = val;
}

const char* ComputeResp::ascii_fingerprint = "D107D7871DEF6F5C2F0D1CC6DD8AB626";
const uint8_t ComputeResp::binary_fingerprint[16] = {0xD1,0x07,0xD7,0x87,0x1D,0xEF,0x6F,0x5C,0x2F,0x0D,0x1C,0xC6,0xDD,0x8A,0xB6,0x26};

uint32_t ComputeResp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_version = false;
  bool isset_type = false;
  bool isset_status = false;
  bool isset_mapsplitId = false;
  bool isset_data = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->version);
          isset_version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->type);
          isset_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->status);
          isset_status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mapsplitId);
          isset_mapsplitId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->data);
          isset_data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_version)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_type)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_status)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_mapsplitId)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_data)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t ComputeResp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ComputeResp");

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_BYTE, 1);
  xfer += oprot->writeByte(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mapsplitId", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->mapsplitId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ComputeResp &a, ComputeResp &b) {
  using ::std::swap;
  swap(a.version, b.version);
  swap(a.type, b.type);
  swap(a.status, b.status);
  swap(a.mapsplitId, b.mapsplitId);
  swap(a.data, b.data);
}

ComputeResp::ComputeResp(const ComputeResp& other16) {
  version = other16.version;
  type = other16.type;
  status = other16.status;
  mapsplitId = other16.mapsplitId;
  data = other16.data;
}
ComputeResp& ComputeResp::operator=(const ComputeResp& other17) {
  version = other17.version;
  type = other17.type;
  status = other17.status;
  mapsplitId = other17.mapsplitId;
  data = other17.data;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ComputeResp& obj) {
  using apache::thrift::to_string;
  out << "ComputeResp(";
  out << "version=" << to_string(obj.version);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "status=" << to_string(obj.status);
  out << ", " << "mapsplitId=" << to_string(obj.mapsplitId);
  out << ", " << "data=" << to_string(obj.data);
  out << ")";
  return out;
}


